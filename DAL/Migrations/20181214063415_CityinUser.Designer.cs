// <auto-generated />
using System;
using DAL.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181214063415_CityinUser")]
    partial class CityinUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppModel.DomainModels.CancellationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CancellationReasons");
                });

            modelBuilder.Entity("AppModel.DomainModels.CancellationReasonML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CancellationReason_Id");

                    b.Property<int>("Culture");

                    b.Property<string>("Reason");

                    b.HasKey("Id");

                    b.HasIndex("CancellationReason_Id");

                    b.ToTable("CancellationReasonMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Branch_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DAL.DomainModels.AccountML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Account_Id");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<string>("IBN");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.ToTable("AccountMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<short>("Role");

                    b.Property<int?>("Role_Id");

                    b.Property<short?>("Status");

                    b.Property<int?>("Store_Id");

                    b.HasKey("Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DAL.DomainModels.AdminNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdminId");

                    b.Property<int>("Admin_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageUrl");

                    b.Property<int>("TargetAudienceType");

                    b.Property<string>("Text");

                    b.Property<string>("Text_Ar");

                    b.Property<string>("Title");

                    b.Property<string>("Title_Ar");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminNotifications");
                });

            modelBuilder.Entity("DAL.DomainModels.AdminSubAdminNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdminId");

                    b.Property<int?>("AdminNotificationId");

                    b.Property<int?>("AdminNotification_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Status");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("AdminNotificationId");

                    b.ToTable("AdminSubAdminNotifications");
                });

            modelBuilder.Entity("DAL.DomainModels.AdminTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdminId");

                    b.Property<int>("Admin_Id");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminTokens");
                });

            modelBuilder.Entity("DAL.DomainModels.AppRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CanImprove");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<short>("Rating");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("AppRatings");
                });

            modelBuilder.Entity("DAL.DomainModels.AppRatingML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppRating_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppRating_Id");

                    b.ToTable("AppRatingMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("DAL.DomainModels.BankML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bank_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Bank_Id");

                    b.ToTable("BankMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bank_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("Bank_Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DAL.DomainModels.BranchML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("Branch_Id");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.ToTable("BranchMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CarCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CarCapacity");
                });

            modelBuilder.Entity("DAL.DomainModels.CarCapacityML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarCapacity_Id");

                    b.Property<int>("Culture");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CarCapacity_Id");

                    b.ToTable("CarCapacityMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CarCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CarCompanies");
                });

            modelBuilder.Entity("DAL.DomainModels.CarCompanyML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarCompany_Id");

                    b.Property<int>("Culture");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CarCompany_Id");

                    b.ToTable("CarCompanyMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("DAL.DomainModels.CarModelML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarModel_Id");

                    b.Property<int>("Culture");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CarModel_Id");

                    b.ToTable("CarModelMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");
                });

            modelBuilder.Entity("DAL.DomainModels.CarTypeML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarType_Id");

                    b.Property<int>("Culture");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CarType_Id");

                    b.ToTable("CarTypeMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CarYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CarYear");
                });

            modelBuilder.Entity("DAL.DomainModels.CarYearML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarYear_Id");

                    b.Property<int>("Culture");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CarYear_Id");

                    b.ToTable("CarYearMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CashSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Account_Id");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Driver_Id");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentType");

                    b.Property<int>("RemainingRides");

                    b.Property<int>("Status");

                    b.Property<int>("SubscriptionPackage_Id");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("SubscriptionPackage_Id");

                    b.ToTable("CashSubscriptions");
                });

            modelBuilder.Entity("DAL.DomainModels.CashSubscriptionMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CashSubscription_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MediaUrl");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CashSubscription_Id");

                    b.ToTable("CashSubscriptionMedias");
                });

            modelBuilder.Entity("DAL.DomainModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Country_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("Country_Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DAL.DomainModels.CityML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("City_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.ToTable("CityMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Driver_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("DAL.DomainModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DAL.DomainModels.CountryML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Country_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Country_Id");

                    b.ToTable("CountryMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CVV");

                    b.Property<string>("CardNumber");

                    b.Property<string>("CardTypeName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Driver_Id");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("DAL.DomainModels.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BriefIntro");

                    b.Property<string>("CarColor");

                    b.Property<string>("CarName");

                    b.Property<string>("CarNumber");

                    b.Property<int?>("City_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<string>("HomeAddress");

                    b.Property<string>("InvitationCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNotificationsOn");

                    b.Property<DateTime>("LicenseExpiry");

                    b.Property<string>("LicenseNo");

                    b.Property<int>("LoginStatus");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<int>("RatedRidesCount");

                    b.Property<double>("Rating");

                    b.Property<int>("RidesCount");

                    b.Property<int>("SignInType");

                    b.Property<int>("Status");

                    b.Property<bool>("TermsAndConditions");

                    b.Property<double>("TotalMileage");

                    b.Property<string>("UniqueId");

                    b.Property<string>("Username");

                    b.Property<double>("Wallet");

                    b.Property<string>("WorkHistory");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DAL.DomainModels.DriverAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountHolderName");

                    b.Property<string>("AccountNumber");

                    b.Property<int>("Branch_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Driver_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.HasIndex("Driver_Id");

                    b.ToTable("DriverAccounts");
                });

            modelBuilder.Entity("DAL.DomainModels.DriverPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Driver_Id");

                    b.Property<string>("InvoiceUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.ToTable("DriverPayments");
                });

            modelBuilder.Entity("DAL.DomainModels.DriversMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Driver_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MediaUrl");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.ToTable("DriverMedias");
                });

            modelBuilder.Entity("DAL.DomainModels.DriverSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Driver_Id");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RemainingRides");

                    b.Property<int>("SubscriptionPackage_Id");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("SubscriptionPackage_Id");

                    b.ToTable("DriverSubscriptions");
                });

            modelBuilder.Entity("DAL.DomainModels.FareCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicCharges");

                    b.Property<int?>("City_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<double>("FarePerKM");

                    b.Property<double>("FarePerMin");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentMethod");

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.ToTable("FareCalculations");
                });

            modelBuilder.Entity("DAL.DomainModels.FavouriteLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FormattedAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PlaceId");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("FavouriteLocations");
                });

            modelBuilder.Entity("DAL.DomainModels.InvitedFriend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("InvitedUser_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Referrer_Id");

                    b.HasKey("Id");

                    b.HasIndex("InvitedUser_Id");

                    b.HasIndex("Referrer_Id");

                    b.ToTable("InvitedFriends");
                });

            modelBuilder.Entity("DAL.DomainModels.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Driver_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Text");

                    b.Property<int>("User_Id");

                    b.Property<bool>("isUserSender");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.DomainModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdminNotification_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Driver_Id");

                    b.Property<int?>("Entity_Id");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Status");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<int?>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("AdminNotification_Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.DomainModels.PaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Driver_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Package_Id");

                    b.Property<string>("TransactionId");

                    b.Property<int?>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("DAL.DomainModels.Promocode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivationDate");

                    b.Property<string>("Code");

                    b.Property<int>("CodeType");

                    b.Property<int>("CouponAmount");

                    b.Property<int>("CouponType");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("Discount");

                    b.Property<string>("Email");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<int>("ExpiryHours");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<int>("LimitOfUsage");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Type");

                    b.Property<int?>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Promocodes");
                });

            modelBuilder.Entity("DAL.DomainModels.RideType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BasicCharges");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<string>("DefaultImageUrl");

                    b.Property<float>("FarePerKm");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<float>("PeakFactor");

                    b.Property<int>("PersonsCapacity");

                    b.Property<string>("SelectedImageUrl");

                    b.HasKey("Id");

                    b.ToTable("RideTypes");
                });

            modelBuilder.Entity("DAL.DomainModels.RideTypeML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutRideType");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("RideType_Id");

                    b.HasKey("Id");

                    b.HasIndex("RideType_Id");

                    b.ToTable("RideTypeMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DAL.DomainModels.RoleScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowScreen");

                    b.Property<bool>("Fullaccess");

                    b.Property<int>("Role_Id");

                    b.Property<int>("Screen_Id");

                    b.HasKey("Id");

                    b.HasIndex("Role_Id");

                    b.HasIndex("Screen_Id");

                    b.ToTable("RoleScreens");
                });

            modelBuilder.Entity("DAL.DomainModels.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Name_Ar");

                    b.HasKey("Id");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("DAL.DomainModels.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<string>("CurrencySymbol");

                    b.Property<float>("InvitationBonus");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("MaximumRequestRadius");

                    b.Property<double>("MinimumRequestRadius");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("RideTax");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DAL.DomainModels.SettingsML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutUs");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Culture");

                    b.Property<string>("Currency");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PrivacyPolicy");

                    b.Property<int>("Settings_Id");

                    b.Property<string>("TermsOfUse");

                    b.HasKey("Id");

                    b.HasIndex("Settings_Id");

                    b.ToTable("SettingsMLs");
                });

            modelBuilder.Entity("DAL.DomainModels.SubscriptionPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Duration");

                    b.Property<int>("DurationType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("NumOfRides");

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPackages");
                });

            modelBuilder.Entity("DAL.DomainModels.SupportConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastConversationDate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserName");

                    b.Property<int>("userType");

                    b.HasKey("Id");

                    b.ToTable("SupportConversations");
                });

            modelBuilder.Entity("DAL.DomainModels.TopUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Account_Id");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Status");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("BankTopUps");
                });

            modelBuilder.Entity("DAL.DomainModels.TopUpMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MediaUrl");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("TopUp_Id");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TopUp_Id");

                    b.ToTable("TopUpMedias");
                });

            modelBuilder.Entity("DAL.DomainModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CancellationReason_Id");

                    b.Property<double>("CollectCash");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DestinationLocationName");

                    b.Property<float>("Discount");

                    b.Property<double>("DriverRating");

                    b.Property<int?>("Driver_Id");

                    b.Property<DateTime>("EndTime");

                    b.Property<float>("EstimatedFare");

                    b.Property<double>("Fare");

                    b.Property<float>("FarePerKm");

                    b.Property<string>("FeedbackForDriver");

                    b.Property<string>("FeedbackForUser");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<float>("PeakFactor");

                    b.Property<DateTime>("PickupDateTime");

                    b.Property<string>("PickupLocationName");

                    b.Property<int?>("PrimaryUser_Id");

                    b.Property<int?>("Promocode_Id");

                    b.Property<string>("ReasonToCancel");

                    b.Property<DateTime>("RequestTime");

                    b.Property<int>("RideType_Id");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Status");

                    b.Property<double>("UserRating");

                    b.Property<bool>("isScheduled");

                    b.HasKey("Id");

                    b.HasIndex("CancellationReason_Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("PrimaryUser_Id");

                    b.HasIndex("Promocode_Id");

                    b.HasIndex("RideType_Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("DAL.DomainModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("AppReferrerUserId");

                    b.Property<int?>("City_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<float>("Credit");

                    b.Property<int>("CurrentReferralCount");

                    b.Property<DateTime>("DateofBirth");

                    b.Property<double>("DistanceTravelled");

                    b.Property<int>("DriverPreference");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FreeRides");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<string>("InvitationCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNotificationsOn");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<bool>("PhoneConfirmed");

                    b.Property<string>("PhoneNo");

                    b.Property<int>("PrefferedPaymentMethod");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<int>("RatedRidesCount");

                    b.Property<float>("Rating");

                    b.Property<int>("RidesCount");

                    b.Property<int?>("SignInType");

                    b.Property<string>("State");

                    b.Property<short?>("Status");

                    b.Property<bool>("TermsAndConditions");

                    b.Property<double>("TotalDistance");

                    b.Property<string>("UniqueId");

                    b.Property<bool>("UseCreditFirst");

                    b.Property<string>("UserName");

                    b.Property<double>("Wallet");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.DomainModels.UserCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Promocode_Id");

                    b.Property<DateTime>("UsageDate");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Promocode_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserPromocode");
                });

            modelBuilder.Entity("DAL.DomainModels.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationType");

                    b.Property<string>("AuthToken");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceName");

                    b.Property<int?>("Driver_Id");

                    b.Property<int>("EnvironmentType");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Platform");

                    b.Property<string>("UDID");

                    b.Property<int?>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("DAL.DomainModels.UserTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<short>("Rating");

                    b.Property<DateTime>("RequestTime");

                    b.Property<int>("Trip_Id");

                    b.Property<int>("User_Id");

                    b.Property<bool>("isScheduled");

                    b.HasKey("Id");

                    b.HasIndex("Trip_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserTrips");
                });

            modelBuilder.Entity("DAL.DomainModels.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Capacity");

                    b.Property<int>("Capacity_Id");

                    b.Property<string>("Classification");

                    b.Property<string>("Company");

                    b.Property<int>("Company_Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Driver_Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Model");

                    b.Property<int>("Model_Id");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("RegistrationExpiry");

                    b.Property<int?>("RideType_Id");

                    b.Property<string>("Type");

                    b.Property<int>("Type_Id");

                    b.Property<string>("Year");

                    b.Property<int>("Year_Id");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("Capacity_Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("Driver_Id");

                    b.HasIndex("Model_Id");

                    b.HasIndex("RideType_Id");

                    b.HasIndex("Type_Id");

                    b.HasIndex("Year_Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DAL.DomainModels.VehicleMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MediaUrl");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Type");

                    b.Property<int?>("Vehicle_Id");

                    b.HasKey("Id");

                    b.HasIndex("Vehicle_Id");

                    b.ToTable("VehicleMedias");
                });

            modelBuilder.Entity("DAL.DomainModels.VerifyNumberCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone");

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.ToTable("VerifyNumberCodes");
                });

            modelBuilder.Entity("AppModel.DomainModels.CancellationReasonML", b =>
                {
                    b.HasOne("AppModel.DomainModels.CancellationReason", "CancellationReason")
                        .WithMany("CancellationReasonMLsList")
                        .HasForeignKey("CancellationReason_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Account", b =>
                {
                    b.HasOne("DAL.DomainModels.Branch", "Branch")
                        .WithMany("Accounts")
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.AccountML", b =>
                {
                    b.HasOne("DAL.DomainModels.Account", "Account")
                        .WithMany("AccountMLsList")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Admin", b =>
                {
                    b.HasOne("DAL.DomainModels.Role", "Roles")
                        .WithMany("Admins")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.AdminNotifications", b =>
                {
                    b.HasOne("DAL.DomainModels.Admin", "Admin")
                        .WithMany("SentNotifications")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("DAL.DomainModels.AdminSubAdminNotifications", b =>
                {
                    b.HasOne("DAL.DomainModels.Admin", "Admin")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.AdminNotifications", "AdminNotification")
                        .WithMany("AdminSubAdminNotifications")
                        .HasForeignKey("AdminNotificationId");
                });

            modelBuilder.Entity("DAL.DomainModels.AdminTokens", b =>
                {
                    b.HasOne("DAL.DomainModels.Admin", "Admin")
                        .WithMany("AdminTokens")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("DAL.DomainModels.AppRating", b =>
                {
                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("AppRatings")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.AppRatingML", b =>
                {
                    b.HasOne("DAL.DomainModels.AppRating", "AppRating")
                        .WithMany("AppRatingMLsList")
                        .HasForeignKey("AppRating_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.BankML", b =>
                {
                    b.HasOne("DAL.DomainModels.Bank", "Bank")
                        .WithMany("BankMLsList")
                        .HasForeignKey("Bank_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Branch", b =>
                {
                    b.HasOne("DAL.DomainModels.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("Bank_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.BranchML", b =>
                {
                    b.HasOne("DAL.DomainModels.Branch", "Branch")
                        .WithMany("BranchMLsList")
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CarCapacityML", b =>
                {
                    b.HasOne("DAL.DomainModels.CarCapacity", "CarCapacity")
                        .WithMany("CarCapacityMLsList")
                        .HasForeignKey("CarCapacity_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CarCompanyML", b =>
                {
                    b.HasOne("DAL.DomainModels.CarCompany", "CarCompany")
                        .WithMany("CarCompanyMLsList")
                        .HasForeignKey("CarCompany_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CarModelML", b =>
                {
                    b.HasOne("DAL.DomainModels.CarModel", "CarModel")
                        .WithMany("CarModelMLsList")
                        .HasForeignKey("CarModel_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CarTypeML", b =>
                {
                    b.HasOne("DAL.DomainModels.CarType", "CarType")
                        .WithMany("CarTypeMLsList")
                        .HasForeignKey("CarType_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CarYearML", b =>
                {
                    b.HasOne("DAL.DomainModels.CarYear", "CarYear")
                        .WithMany("CarYearMLsList")
                        .HasForeignKey("CarYear_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CashSubscription", b =>
                {
                    b.HasOne("DAL.DomainModels.Account", "Account")
                        .WithMany("CashSubscriptions")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("CashSubscriptions")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("CashSubscriptions")
                        .HasForeignKey("SubscriptionPackage_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CashSubscriptionMedia", b =>
                {
                    b.HasOne("DAL.DomainModels.CashSubscription", "CashSubscription")
                        .WithMany("Receipts")
                        .HasForeignKey("CashSubscription_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.City", b =>
                {
                    b.HasOne("DAL.DomainModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("Country_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CityML", b =>
                {
                    b.HasOne("DAL.DomainModels.City", "City")
                        .WithMany("CityMLsList")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.ContactUs", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("ContactUs")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("ContactUs")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CountryML", b =>
                {
                    b.HasOne("DAL.DomainModels.Country", "Country")
                        .WithMany("CountryMLsList")
                        .HasForeignKey("Country_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.CreditCard", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("CreditCards")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("CreditCards")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Driver", b =>
                {
                    b.HasOne("DAL.DomainModels.City", "City")
                        .WithMany("Drivers")
                        .HasForeignKey("City_Id");

                    b.OwnsOne("DAL.DomainModels.Location", "Location", b1 =>
                        {
                            b1.Property<int>("DriverId");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("Drivers");

                            b1.HasOne("DAL.DomainModels.Driver")
                                .WithOne("Location")
                                .HasForeignKey("DAL.DomainModels.Location", "DriverId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DAL.DomainModels.DriverAccount", b =>
                {
                    b.HasOne("DAL.DomainModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("DriverAccounts")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.DriverPayment", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("DriverPayments")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.DriversMedia", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("Medias")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.DriverSubscription", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("DriverSubscriptions")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("DriverSubscriptions")
                        .HasForeignKey("SubscriptionPackage_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.FareCalculation", b =>
                {
                    b.HasOne("DAL.DomainModels.City", "City")
                        .WithMany("FareCalculations")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.FavouriteLocation", b =>
                {
                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("FavouriteLocations")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DAL.DomainModels.Location", "Location", b1 =>
                        {
                            b1.Property<int>("FavouriteLocationId");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("FavouriteLocations");

                            b1.HasOne("DAL.DomainModels.FavouriteLocation")
                                .WithOne("Location")
                                .HasForeignKey("DAL.DomainModels.Location", "FavouriteLocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DAL.DomainModels.InvitedFriend", b =>
                {
                    b.HasOne("DAL.DomainModels.User", "InvitedUser")
                        .WithMany("InvitedFriends")
                        .HasForeignKey("InvitedUser_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "Referrer")
                        .WithMany("Referrer")
                        .HasForeignKey("Referrer_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Message", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("Driver_Id");

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Notification", b =>
                {
                    b.HasOne("DAL.DomainModels.AdminNotifications", "AdminNotification")
                        .WithMany("Notifications")
                        .HasForeignKey("AdminNotification_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("Notifications")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.PaymentHistory", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Promocode", b =>
                {
                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id");
                });

            modelBuilder.Entity("DAL.DomainModels.RideTypeML", b =>
                {
                    b.HasOne("DAL.DomainModels.RideType", "RideType")
                        .WithMany("RideTypeMLsList")
                        .HasForeignKey("RideType_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.RoleScreen", b =>
                {
                    b.HasOne("DAL.DomainModels.Role", "Roles")
                        .WithMany("RoleScreen")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.Screen", "Screens")
                        .WithMany("RoleScreen")
                        .HasForeignKey("Screen_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.SettingsML", b =>
                {
                    b.HasOne("DAL.DomainModels.Settings", "Settings")
                        .WithMany("SettingsMLsList")
                        .HasForeignKey("Settings_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.TopUp", b =>
                {
                    b.HasOne("DAL.DomainModels.Account", "Account")
                        .WithMany("BankTopUps")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("BankTopUps")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.TopUpMedia", b =>
                {
                    b.HasOne("DAL.DomainModels.TopUp", "TopUp")
                        .WithMany("Receipts")
                        .HasForeignKey("TopUp_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Trip", b =>
                {
                    b.HasOne("AppModel.DomainModels.CancellationReason", "CancellationReason")
                        .WithMany()
                        .HasForeignKey("CancellationReason_Id");

                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUser_Id");

                    b.HasOne("DAL.DomainModels.Promocode", "Promocode")
                        .WithMany()
                        .HasForeignKey("Promocode_Id");

                    b.HasOne("DAL.DomainModels.RideType", "RideType")
                        .WithMany("Trips")
                        .HasForeignKey("RideType_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DAL.DomainModels.Location", "DestinationLocation", b1 =>
                        {
                            b1.Property<int>("TripId");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("Trips");

                            b1.HasOne("DAL.DomainModels.Trip")
                                .WithOne("DestinationLocation")
                                .HasForeignKey("DAL.DomainModels.Location", "TripId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DAL.DomainModels.Location", "PickupLocation", b1 =>
                        {
                            b1.Property<int>("TripId");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("Trips");

                            b1.HasOne("DAL.DomainModels.Trip")
                                .WithOne("PickupLocation")
                                .HasForeignKey("DAL.DomainModels.Location", "TripId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DAL.DomainModels.User", b =>
                {
                    b.HasOne("DAL.DomainModels.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("City_Id");
                });

            modelBuilder.Entity("DAL.DomainModels.UserCode", b =>
                {
                    b.HasOne("DAL.DomainModels.Promocode", "Promocode")
                        .WithMany("UserPromocodes")
                        .HasForeignKey("Promocode_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("UserPromocodes")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.UserDevice", b =>
                {
                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("DriverDevices")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.UserTrip", b =>
                {
                    b.HasOne("DAL.DomainModels.Trip", "Trip")
                        .WithMany("UserTrips")
                        .HasForeignKey("Trip_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.User", "User")
                        .WithMany("UserTrips")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.Vehicle", b =>
                {
                    b.HasOne("DAL.DomainModels.CarCapacity", "CarCapacity")
                        .WithMany("Vehicles")
                        .HasForeignKey("Capacity_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.CarCompany", "CarCompany")
                        .WithMany("Vehicles")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("Driver_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.CarModel", "CarModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("Model_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.RideType", "RideType")
                        .WithMany("Vehicles")
                        .HasForeignKey("RideType_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.CarType", "CarType")
                        .WithMany("Vehicles")
                        .HasForeignKey("Type_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DomainModels.CarYear", "CarYear")
                        .WithMany("Vehicles")
                        .HasForeignKey("Year_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DomainModels.VehicleMedia", b =>
                {
                    b.HasOne("DAL.DomainModels.Vehicle", "Vehicle")
                        .WithMany("Medias")
                        .HasForeignKey("Vehicle_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
